{"version":3,"sources":["components/card/Card.jsx","components/estimate/Estimate.jsx","components/open-button/OpenButton.jsx","components/copy-button/CopyButton.jsx","components/table/Table.jsx","components/user/User.jsx","components/card-selection/CardSelection.jsx","pages/Page.jsx","App.js","index.js"],"names":["Card","size","point","isSelectable","isSelected","isClosed","handleClick","props","className","join","onClick","defaultProps","Estimate","isOpend","name","String","OpenButton","CopyButton","text","undefined","Table","estimaters","handleOpenButtonClick","Array","isArray","map","estimater","length","createCopyText","now","Date","toLocaleDateString","toLocaleTimeString","sort","e1","e2","reduce","acc","cur","User","points","CardSelection","selectedPoint","handleCardClick","Page","userName","handleSelectionCardClick","myEstimater","find","e","App","eventSubscribers","select","event","state","slice","setState","unselect","filter","open","return","myName","window","prompt","roomId","socket","getSetupedRoomId","io","isOend","bind","search","location","substring","uuid","uuidv4","hash","history","replaceState","this","on","subscriber","type","eventType","emit","isOff","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.85a55718.chunk.js","sourcesContent":["\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nexport const Card = ({ size, point, isSelectable, isSelected, isClosed, handleClick, ...props }) => {\n  return (\n    <div\n      className={[\n        \"card\",\n        (\"card-\" + size),\n        (isSelectable ? \"card-selectable\" : \"\"),\n        (isSelected ? \"card-selected\" : \"\"),\n        (isClosed ? \"card-closed\" : \"\")\n      ].join(\" \")}\n      onClick={() => handleClick(point)}\n      {...props}\n    >\n      {isClosed ? \"\" : point}\n    </div>\n  );\n}\n\nCard.propTypes = {\n  /**\n   * サイズ\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * ポイント数\n   */\n  point: PropTypes.string,\n  /**\n   * 選択可能かどうか?\n   */\n  isSelectable: PropTypes.bool,\n  /**\n   * 選択されているかどうか?\n   */\n  isSelected: PropTypes.bool,\n  /**\n   * 閉じてるかどうか?\n   */\n  isClosed: PropTypes.bool,\n  /**\n   * クリック時の動作。引き数: point\n   */\n  handleClick: PropTypes.func,\n};\n\nCard.defaultProps = {\n  size: \"medium\",\n  point: 0,\n  isSelectable: false,\n  isSelected: false,\n  isClosed: false,\n  handleClick: () => { },\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from '../card/Card'\nimport './Estimate.css';\n\nexport const Estimate = ({ isOpend, point, name, ...props }) => {\n  return (\n    <div className={\"estimate\"}>\n      <Card isSelectable={false} isClosed={!isOpend} size=\"large\" point={isOpend ? String(point) : \"\"} />\n      <div className=\"estimate-name\">{name}</div>\n    </div>\n  );\n}\n\n\nEstimate.propTypes = {\n  /**\n   * オープンフラグ\n   */\n  isOpend: PropTypes.bool,\n  /**\n   * ポイント\n   */\n  point: PropTypes.string,\n  /**\n   * 見積もり者名\n   */\n  name: PropTypes.string,\n};\n\nEstimate.defaultProps = {\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './OpenButton.css';\n\nexport const OpenButton = ({ isOpend, handleClick }) => {\n  const className = \"openbutton\";\n  return (\n    <div className={className} onClick={handleClick}>\n      {isOpend ? \"return\" : \"open\"}\n    </div>\n  );\n}\n\nOpenButton.propTypes = {\n  /**\n   * コピー対象のテキスト\n   */\n  isOpend: PropTypes.bool,\n};\n\nOpenButton.defaultProps = {\n  isOpend: false\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\nimport './CopyButton.css';\n\nexport const CopyButton = ({ text }) => {\n  return (\n    <CopyToClipboard text={text}>\n      <div className=\"copybutton\">Copy</div>\n    </CopyToClipboard>\n  );\n}\n\nCopyButton.propTypes = {\n  /**\n   * コピー対象のテキスト\n   */\n  text: PropTypes.string,\n};\n\nCopyButton.defaultProps = {\n  text: undefined,\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Estimate } from '../estimate/Estimate'\nimport { OpenButton } from '../open-button/OpenButton'\nimport { CopyButton } from '../copy-button/CopyButton'\nimport './Table.css';\n\nexport const Table = ({ isOpend, estimaters, handleOpenButtonClick, ...props }) => {\n  return (\n    <div className=\"table\">\n      <div className=\"table-estimaters\">\n        {Array.isArray(estimaters) ? estimaters.map((estimater) =>\n          <Estimate\n            key={estimater.name}\n            name={estimater.name}\n            point={estimater.point}\n            isOpend={isOpend}\n          />\n        ) : undefined}\n      </div>\n      <OpenButton\n        isOpend={isOpend}\n        handleClick={handleOpenButtonClick}\n      />\n      {isOpend && estimaters && estimaters.length > 0 ?\n        <CopyButton text={createCopyText(estimaters)} />\n        : null}\n    </div>\n  );\n}\n\nfunction createCopyText(estimaters) {\n  if (!estimaters || estimaters.length === 0) {\n    return \"empty.\";\n  }\n  const now = new Date();\n  return (\n    \"[\" +\n    now.toLocaleDateString() +\n    \" \" +\n    now.toLocaleTimeString() +\n    \"] \" +\n    estimaters.sort((e1, e2) => e1.name > e2.name ? 1 : -1).reduce(\n      (acc, cur) => (acc ? acc + \" \" : \"\") + `${cur.name}(${cur.point})`,\n      null\n    )\n  );\n}\n\nTable.propTypes = {\n  /**\n   * オープンフラグ\n   */\n  isOpend: PropTypes.bool,\n  /**\n   * 見積りリスト\n   */\n  estimaters: PropTypes.arrayOf(PropTypes.object),\n  /**\n   *  OPENボタンクリック時の動作\n   */\n  handleOpenButtonClick: PropTypes.func\n};\n\nTable.defaultProps = {\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './User.css';\n\nexport const User = ({ name, ...props }) => {\n  return <div className=\"user\" {...props}>{name}</div>;\n}\n\nUser.propTypes = {\n  /**\n   * ユーザー名\n   */\n  name: PropTypes.string,\n};\n\nUser.defaultProps = {\n  name: \"\",\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from \"../card/Card\"\nimport \"./CardSelection.css\"\n\nconst points = [\"0\", \"1\", \"2\", \"3\", \"5\", \"8\", \"13\", \"21\", \"34\", \"55\", \"?\", \"∞\"];\n\nexport const CardSelection = ({ selectedPoint, handleCardClick, ...props }) => {\n  return <div className=\"card-selection\">\n    {points.map((point) => {\n\n      return (\n        <Card\n          isSelectable={true}\n          isSelected={selectedPoint === point}\n          key={point}\n          point={String(point)}\n          handleClick={handleCardClick}\n        />\n      );\n    })}\n  </div>;\n}\n\nCardSelection.propTypes = {\n  /**\n   * 選択済ポイント\n   */\n  selectedPoint: PropTypes.string,\n  /**\n  * カードクリック時の動作。引き数: point\n   */\n  handleCardClick: PropTypes.func,\n};\n\nCardSelection.defaultProps = {\n  selectedPoint: \"\",\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from '../components/table/Table'\nimport { User } from '../components/user/User'\nimport { CardSelection } from '../components/card-selection/CardSelection'\nimport './Page.css'\n\n\nexport const Page = ({ userName, isOpend, estimaters, handleOpenButtonClick, handleSelectionCardClick, ...props }) => {\n  const myEstimater = estimaters ? estimaters.find((e) => e.name === userName) : undefined;\n  return (\n    <div className=\"page\">\n      <div>\n        <h1>Planning Poker</h1>\n        <Table\n          estimaters={estimaters}\n          isOpend={isOpend}\n          handleOpenButtonClick={handleOpenButtonClick}\n        />\n        <User name={userName} />\n        <CardSelection\n          selectedPoint={myEstimater ? myEstimater.point : undefined}\n          handleCardClick={handleSelectionCardClick}\n        />\n      </div>\n    </div>\n  );\n}\n\nPage.propTypes = {\n  /**\n   * ユーザー名\n   */\n  userName: PropTypes.string,\n  /**\n   * オープンフラグ\n   */\n  isOpend: PropTypes.bool,\n  /**\n   * 見積りリスト\n   */\n  estimaters: PropTypes.arrayOf(PropTypes.object),\n  /**\n   *  OPENボタンクリック時の動作\n   */\n  handleOpenButtonClick: PropTypes.func,\n  /**\n   * カード選択時の動作\n   */\n  handleSelectionCardClick: PropTypes.func,\n};\n\nPage.defaultProps = {\n};","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { Page } from \"./pages/Page\"\n\nimport \"./App.css\";\n\nexport class App extends React.Component {\n  constructor(props) {\n    super(props);\n    let myName = undefined;\n    while (!myName) {\n      myName = window.prompt(\"your name\");\n    }\n    const socket = setupWebsocket(this.getSetupedRoomId());\n    this.state = {\n      myName: myName,\n      estimaters: [],\n      isOend: false,\n      socket: socket,\n    };\n    this.handleSelectionCardClick = this.handleSelectionCardClick.bind(this);\n    this.handleOpenButtonClick = this.handleOpenButtonClick.bind(this);\n  }\n\n  getSetupedRoomId() {\n    const search = window.location.search;\n    let roomId;\n    if (!search) {\n      const uuid = uuidv4();\n      window.location.hash = uuid;\n      window.history.replaceState(\"\", \"\", \"?\" + uuid);\n      roomId = uuid;\n    } else {\n      roomId = search.substring(1);\n    }\n    return roomId;\n  }\n  componentDidMount() {\n    this.state.socket.on(\"do event\", (event) => {\n      const subscriber = this.eventSubscribers[event.type];\n      if (subscriber) {\n        subscriber(event);\n      }\n    });\n  }\n\n  eventSubscribers = {\n    select: (event) => {\n      let estimaters = this.state.estimaters.slice();\n      let estimater = estimaters.find((e) => e.name === event.name);\n      if (!estimater) {\n        estimater = { name: event.name };\n        estimaters[estimaters.length] = estimater;\n      }\n      estimater[\"point\"] = String(event.point);\n      this.setState({ estimaters: estimaters });\n    },\n    unselect: (event) => {\n      const estimaters = this.state.estimaters.filter(\n        (e) => e.name !== event.name\n      );\n      this.setState({ estimaters: estimaters });\n    },\n    open: (event) => {\n      this.setState({\n        isOpend: true,\n      });\n    },\n    return: (event) => {\n      this.setState({\n        estimaters: [],\n        isOpend: false,\n      });\n    },\n  };\n\n  handleOpenButtonClick() {\n    const isOpend =\n      this.state.estimaters.length === 0 ? false : !this.state.isOpend;\n    const eventType = isOpend ? \"open\" : \"return\";\n    this.state.socket.emit(\"do event\", { type: eventType });\n  }\n\n  handleSelectionCardClick(point) {\n    const myEstimater = this.state.estimaters.find(\n      (e) => e.name === this.state.myName\n    );\n    const isOff = myEstimater && myEstimater.point === point;\n    let estimaters = this.state.estimaters.slice();\n    if (isOff) {\n      estimaters = this.state.estimaters.filter(\n        (e) => e.name !== this.state.myName\n      );\n    } else {\n      let myEstimater = estimaters.find((e) => e.name === this.state.myName);\n      if (!myEstimater) {\n        myEstimater = { name: this.state.myName };\n        estimaters[estimaters.length] = myEstimater;\n      }\n      myEstimater[\"point\"] = String(point);\n    }\n    const eventType = isOff ? \"unselect\" : \"select\";\n    this.state.socket.emit(\"do event\", {\n      type: eventType,\n      name: this.state.myName,\n      point: String(point),\n    });\n  }\n\n  render() {\n    return (\n      <Page\n        userName={this.state.myName}\n        isOpend={this.state.isOpend}\n        estimaters={this.state.estimaters}\n        handleOpenButtonClick={this.handleOpenButtonClick}\n        handleSelectionCardClick={this.handleSelectionCardClick} />\n    );\n  }\n}\n\nfunction setupWebsocket(roomId) {\n  return window.io(\n    \"https://simple-websocket-server.herokuapp.com/?roomId=\" + roomId\n  );\n}\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\"\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}