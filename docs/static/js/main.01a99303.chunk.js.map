{"version":3,"sources":["components/card/Card.jsx","components/estimate/Estimate.jsx","components/open-button/OpenButton.jsx","components/copy-button/CopyButton.jsx","components/table/Table.jsx","components/user/User.jsx","components/card-selection/CardSelection.jsx","pages/Page.jsx","App.js","index.js"],"names":["Card","size","point","isSelectable","isSelected","isClosed","handleClick","props","className","join","onClick","defaultProps","Estimate","isOpend","name","String","OpenButton","console","log","CopyButton","text","undefined","Table","estimaters","handleOpenButtonClick","Array","isArray","map","estimater","length","createCopyText","now","Date","toLocaleDateString","toLocaleTimeString","sort","e1","e2","reduce","acc","cur","User","points","CardSelection","selectedPoint","handleCardClick","Page","userName","handleSelectionCardClick","myEstimater","find","e","App","useState","myName","setMyName","setEstimaters","setIsOpend","socket","setSocket","eventSubscribers","select","event","newEstimaters","slice","unselect","filter","open","return","useEffect","window","prompt","roomId","search","location","substring","uuid","uuidv4","hash","history","replaceState","getSetupedRoomId","io","on","subscriber","type","eventType","emit","isOff","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01a99303.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './Card.css';\n\nexport const Card = ({\n  size,\n  point,\n  isSelectable,\n  isSelected,\n  isClosed,\n  handleClick,\n  ...props\n}) => {\n  return (\n    <div\n      className={[\n        'card',\n        'card-' + size,\n        isSelectable ? 'card-selectable' : '',\n        isSelected ? 'card-selected' : 'card-notselected',\n        isClosed ? 'card-closed' : '',\n      ].join(' ')}\n      onClick={() => handleClick(point)}\n      {...props}\n    >\n      {isClosed ? '' : point}\n    </div>\n  );\n};\n\nCard.propTypes = {\n  /**\n   * サイズ\n   */\n  size: PropTypes.oneOf(['small', 'medium', 'large']),\n  /**\n   * ポイント数\n   */\n  point: PropTypes.string,\n  /**\n   * 選択可能かどうか?\n   */\n  isSelectable: PropTypes.bool,\n  /**\n   * 選択されているかどうか?\n   */\n  isSelected: PropTypes.bool,\n  /**\n   * 閉じてるかどうか?\n   */\n  isClosed: PropTypes.bool,\n  /**\n   * クリック時の動作。引き数: point\n   */\n  handleClick: PropTypes.func,\n};\n\nCard.defaultProps = {\n  size: 'medium',\n  point: 0,\n  isSelectable: false,\n  isSelected: false,\n  isClosed: false,\n  handleClick: () => {},\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from '../card/Card';\nimport './Estimate.css';\n\nexport const Estimate = ({ isOpend, point, name, ...props }) => {\n  return (\n    <div className={'estimate'}>\n      <Card\n        isSelectable={false}\n        isClosed={!isOpend}\n        size=\"large\"\n        point={isOpend ? String(point) : ''}\n      />\n      <div className=\"estimate-name\">{name}</div>\n    </div>\n  );\n};\n\nEstimate.propTypes = {\n  /**\n   * オープンフラグ\n   */\n  isOpend: PropTypes.bool,\n  /**\n   * ポイント\n   */\n  point: PropTypes.string,\n  /**\n   * 見積もり者名\n   */\n  name: PropTypes.string,\n};\n\nEstimate.defaultProps = {};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './OpenButton.css';\n\nexport const OpenButton = ({ isOpend, handleClick }) => {\n  console.log('begin render OpenButton.');\n  const className = 'openbutton';\n  return (\n    <div className={className} onClick={handleClick}>\n      {isOpend ? 'return' : 'open'}\n    </div>\n  );\n};\n\nOpenButton.propTypes = {\n  /**\n   * コピー対象のテキスト\n   */\n  isOpend: PropTypes.bool,\n};\n\nOpenButton.defaultProps = {\n  isOpend: false,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\nimport './CopyButton.css';\n\nexport const CopyButton = ({ text }) => {\n  console.log('begin render CopyButton.');\n  return (\n    <CopyToClipboard text={text}>\n      <div className=\"copybutton\">Copy</div>\n    </CopyToClipboard>\n  );\n};\n\nCopyButton.propTypes = {\n  /**\n   * コピー対象のテキスト\n   */\n  text: PropTypes.string,\n};\n\nCopyButton.defaultProps = {\n  text: undefined,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Estimate } from '../estimate/Estimate';\nimport { OpenButton } from '../open-button/OpenButton';\nimport { CopyButton } from '../copy-button/CopyButton';\nimport './Table.css';\n\nexport const Table = ({\n  isOpend,\n  estimaters,\n  handleOpenButtonClick,\n  ...props\n}) => {\n  console.log('begin render Table.');\n  return (\n    <div className=\"table\">\n      <div className=\"table-estimaters\">\n        {Array.isArray(estimaters)\n          ? estimaters.map(estimater => (\n              <Estimate\n                key={estimater.name}\n                name={estimater.name}\n                point={estimater.point}\n                isOpend={isOpend}\n              />\n            ))\n          : undefined}\n      </div>\n      <OpenButton isOpend={isOpend} handleClick={handleOpenButtonClick} />\n      {isOpend && estimaters && estimaters.length > 0 ? (\n        <CopyButton text={createCopyText(estimaters)} />\n      ) : null}\n    </div>\n  );\n};\n\nfunction createCopyText(estimaters) {\n  if (!estimaters || estimaters.length === 0) {\n    return 'empty.';\n  }\n  const now = new Date();\n  return (\n    '[' +\n    now.toLocaleDateString() +\n    ' ' +\n    now.toLocaleTimeString() +\n    '] ' +\n    estimaters\n      .sort((e1, e2) => (e1.name > e2.name ? 1 : -1))\n      .reduce(\n        (acc, cur) => (acc ? acc + ' ' : '') + `${cur.name}(${cur.point})`,\n        null\n      )\n  );\n}\n\nTable.propTypes = {\n  /**\n   * オープンフラグ\n   */\n  isOpend: PropTypes.bool,\n  /**\n   * 見積りリスト\n   */\n  estimaters: PropTypes.arrayOf(PropTypes.object),\n  /**\n   *  OPENボタンクリック時の動作\n   */\n  handleOpenButtonClick: PropTypes.func,\n};\n\nTable.defaultProps = {};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './User.css';\n\nexport const User = ({ name, ...props }) => {\n  console.log('begin render User.');\n  return (\n    <div className=\"user\" {...props}>\n      {name}\n    </div>\n  );\n};\n\nUser.propTypes = {\n  /**\n   * ユーザー名\n   */\n  name: PropTypes.string,\n};\n\nUser.defaultProps = {\n  name: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from '../card/Card';\nimport './CardSelection.css';\n\nconst points = ['0', '1', '2', '3', '5', '8', '13', '21', '34', '55', '?', '∞'];\n\nexport const CardSelection = ({ selectedPoint, handleCardClick, ...props }) => {\n  console.log('begin render CardSelection.');\n  return (\n    <div className=\"card-selection\">\n      {points.map(point => {\n        return (\n          <Card\n            isSelectable={true}\n            isSelected={selectedPoint === point}\n            key={point}\n            point={String(point)}\n            handleClick={handleCardClick}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nCardSelection.propTypes = {\n  /**\n   * 選択済ポイント\n   */\n  selectedPoint: PropTypes.string,\n  /**\n   * カードクリック時の動作。引き数: point\n   */\n  handleCardClick: PropTypes.func,\n};\n\nCardSelection.defaultProps = {\n  selectedPoint: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from '../components/table/Table';\nimport { User } from '../components/user/User';\nimport { CardSelection } from '../components/card-selection/CardSelection';\nimport './Page.css';\n\nexport const Page = ({\n  userName,\n  isOpend,\n  estimaters,\n  handleOpenButtonClick,\n  handleSelectionCardClick,\n  ...props\n}) => {\n  console.log('begin render Page.');\n  const myEstimater = estimaters\n    ? estimaters.find(e => e.name === userName)\n    : undefined;\n  return (\n    <div className=\"page\">\n      <div>\n        <h1>Planning Poker</h1>\n        <Table\n          estimaters={estimaters}\n          isOpend={isOpend}\n          handleOpenButtonClick={handleOpenButtonClick}\n        />\n        <User name={userName} />\n        <CardSelection\n          selectedPoint={myEstimater ? myEstimater.point : undefined}\n          handleCardClick={handleSelectionCardClick}\n        />\n      </div>\n    </div>\n  );\n};\n\nPage.propTypes = {\n  /**\n   * ユーザー名\n   */\n  userName: PropTypes.string,\n  /**\n   * オープンフラグ\n   */\n  isOpend: PropTypes.bool,\n  /**\n   * 見積りリスト\n   */\n  estimaters: PropTypes.arrayOf(PropTypes.object),\n  /**\n   *  OPENボタンクリック時の動作\n   */\n  handleOpenButtonClick: PropTypes.func,\n  /**\n   * カード選択時の動作\n   */\n  handleSelectionCardClick: PropTypes.func,\n};\n\nPage.defaultProps = {};\n","import { React, useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Page } from './pages/Page';\nimport './App.css';\n\nexport const App = props => {\n  const [myName, setMyName] = useState();\n  const [estimaters, setEstimaters] = useState([]);\n  const [isOpend, setIsOpend] = useState(false);\n  const [socket, setSocket] = useState(undefined);\n\n  const eventSubscribers = {\n    select: event => {\n      const newEstimaters = estimaters.slice();\n      let estimater = newEstimaters.find(e => e.name === event.name);\n      if (!estimater) {\n        estimater = { name: event.name };\n        newEstimaters[newEstimaters.length] = estimater;\n      }\n      estimater['point'] = String(event.point);\n      setEstimaters(newEstimaters);\n    },\n    unselect: event => {\n      const newEstimaters = estimaters.filter(e => e.name !== event.name);\n      setEstimaters(newEstimaters);\n    },\n    open: () => {\n      setIsOpend(true);\n    },\n    return: () => {\n      setEstimaters([]);\n      setIsOpend(false);\n    },\n  };\n\n  // 初回のみ\n  useEffect(() => {\n    console.log('begin init.');\n    if (!myName) {\n      let name = myName;\n      while (!name) {\n        name = window.prompt('your name');\n        setMyName(name);\n      }\n    }\n    setSocket(setupWebsocket(getSetupedRoomId()));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    console.log('begin socket setup.');\n    if (!socket) {\n      return;\n    }\n    socket.on('do event', event => {\n      const subscriber = eventSubscribers[event.type];\n      if (subscriber) {\n        subscriber(event);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [socket]);\n\n  const handleOpenButtonClick = () => {\n    const isOpendFlag = estimaters.length === 0 ? false : !isOpend;\n    const eventType = isOpendFlag ? 'open' : 'return';\n    socket.emit('do event', { type: eventType });\n  };\n\n  const handleSelectionCardClick = point => {\n    const myEstimater = estimaters.find(e => e.name === myName);\n    const isOff = myEstimater && myEstimater.point === point;\n    let newEstimaters = estimaters.slice();\n    if (isOff) {\n      newEstimaters = estimaters.filter(e => e.name !== myName);\n    } else {\n      let myEstimater = estimaters.find(e => e.name === myName);\n      if (!myEstimater) {\n        myEstimater = { name: myName };\n        newEstimaters[newEstimaters.length] = myEstimater;\n      }\n      myEstimater['point'] = String(point);\n    }\n    const eventType = isOff ? 'unselect' : 'select';\n    socket.emit('do event', {\n      type: eventType,\n      name: myName,\n      point: String(point),\n    });\n  };\n\n  return (\n    <Page\n      userName={myName}\n      isOpend={isOpend}\n      estimaters={estimaters}\n      handleOpenButtonClick={handleOpenButtonClick}\n      handleSelectionCardClick={handleSelectionCardClick}\n    />\n  );\n};\n\nfunction setupWebsocket(roomId) {\n  return window.io(\n    'https://simple-websocket-server.herokuapp.com/?roomId=' + roomId\n  );\n}\n\nfunction getSetupedRoomId() {\n  const search = window.location.search;\n  let roomId;\n  if (!search) {\n    const uuid = uuidv4();\n    window.location.hash = uuid;\n    window.history.replaceState('', '', '?' + uuid);\n    roomId = uuid;\n  } else {\n    roomId = search.substring(1);\n  }\n  return roomId;\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}